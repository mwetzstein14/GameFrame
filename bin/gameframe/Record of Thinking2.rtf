{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Record of Thinking\
\
References in Java:\
	Over the course of working on this project, I think that I've finally gotten down how references and everything work in Java. All primitive types seem to be allocated on the stack (I think) instead of the heap, and you cannot have a reference to a primitive type allocated on the heap. If you pass a primitive type as an argument, a copy of it is passes. You cannot pass the original. Objects on the other hand can only be allocated on the heap and you can only hold onto references to objects. Whenever you're dealing with an object, you're actually dealing with a pointer to the object in memory. So when you pass an object as an argument, you pass a copy of the reference, which means that anything you do to an object passed through an argument affects the original object because you are accessing it through its reference in memory. \
\
I'm glad that's settled. I'm disappointed though that Java is less flexible than C++ in this regard because in C++ you can pass either a copy or a reference to either a primitive type or an object. I don't enjoy having to write code working around this limitation in Java. \
\
The UML Was Handy:\
	As I've been working on my project, I've realized that my code has had to change considerably from what I had originally planned out in my UML diagram. I tried to keep my diagram up to date with these changes, but eventually I was changing too many things and I got lazy. Now my UML diagram is pretty different from what my project is now. I guess I've learned that a UML diagram is a good way to know where you're heading when you first start writing code, but it can become a burden of sorts later. What I have yet to find out however is if I will regret not keeping my diagram up to date. I plan to catch my UML diagram up once my project is finished. \
\
Bugs:\
	I recently finished my framework and I've begun actually applying it to making a simple game. In the process, I've found out that there are a quite a few bugs with my framework, and it's been a challenge working through them all. What I was surprised to find out was that most of my bugs came from me not properly understanding how the JGame engine that I'm building my framework on top of works. I guess I've learned that documentation can only teach so much, but it's good to actually test someone else's code out and practice it a little bit before you write your own code on top of it. I feel like if I had messed around with JGame and experimented with it a little before writing my framework, I could have avoided a lot of the bugs in my program. }